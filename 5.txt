1、
使用git branch -b <分支名> 新建并转到一个新分支；（可用git status 指令随时查看工作区的状态）

使用git add <文件名> 把修改完成的代码文件添加到暂存区；

使用git commit -m "<提交注释>" 命令将暂存区的数据提交到本地库；

使用git push <远程库名> <文件名> 指令将文件推送到同事的远程库。

2、
在当前分支使用git stash 指令把当前工作现场<分支3>储存起来；

用git add checkout <分支名1> 指令在需要更新的分支<分支2>上建立一个与远程库更新分支同名的新分支<分支1>;

用git pull 指令把最新的提交从<远程库名>/<分支名1>抓下来；

如果没有在指定本地<分支1>与远程库的<分支1>的链接，则用$ git branch --set-upstream <分支1>  <远程库名>/<分支名1> 指令设置本地与远程的<分支1>的链接；

如果出现冲突，则手动解决冲突并提交，在执行git push <远程库名> <分支1> 指令；

用git checkout <分支名2> 指令转到需要更新的分支；

用git merge <分支名1> 指令将临时分支合并到分支2上；

用git branch -d <分支名1> 指令删除临时分支，完成更新；

用git checkout<分支名3> 指令转到分支3上；

用git stash pop 指令把一开始储存起来的代码恢复回来；

3、
主要用了windows下的git GUI工具，它的界面看起来一般，但用起来比较方便，可以看到文件各个版本的id、注释等





4、
    根据自己不断对文件进行修改，然后不断提交修改到版本库里，就好比玩RPG游戏时，每通过一关就会自动把游戏状态存盘，如果某一关没过去，你还可以选择读取前一关的状态。有些时候，在打Boss之前，你会手动存盘，以便万一打Boss失败了，可以从最近的地方重新开始。Git也是一样，每当你觉得文件修改到一定程度的时候，就可以“保存一个快照”，这个快照在Git中被称为commit。一旦你把文件改乱了，或者误删了文件，还可以从最近的一个commit恢复，然后继续工作，而不是把几个月的工作成果全部丢失。
    每次注释的内容最好是根据版本的变化给出的一个简要的描述，比如修改的位置、内容等。每次提交写一小段不同的注释是一个良好的习惯，因为在版本穿梭的时候，使用git log/git reflog指令 查看历史版本可以比较清楚的判断出哪个版本id对应的是哪次文件修改，并方便根据具体需要将文件回退到对应版本。



5、